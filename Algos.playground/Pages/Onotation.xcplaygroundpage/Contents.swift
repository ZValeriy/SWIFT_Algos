//: [Previous](@previous)    
//: [К началу недели](Week_2)
/*:
 # O-нотация
 Необходима, чтобы анализировать временную сложность алгоритмов.
 - Анализировать по строкам кода не очень хорошо, потому что количество строк не означает количества действий и времени выполнения.
 ##  Чтобы понять, сколько времени нужно программе для выполнения, нужно знать:
 - Характеристики компьютера
 - Архитектура компьютера
 - Используемый комплиятор (интерпретатор)
 - Возможные оптимизации компьютера

 ## Как растут функции
 ![Рост функций](Fun_growth.jpg)
 ## Нотация O.
 - Определение
    f(n)=O(g(n)), если для любых n>N f(n) <=c*g(n)
 
 O-нотация удобна тем, что обобщает временную сложность с точностью до константы. Получается запись короче и удобнеее. Нам не нужно знать, какой компьютер и его характеристики.
 Нотация теряет константу, поэтому иногда может оказаться, что худший алгоритм в O-нотации будет быстрее, потому что константа перед ним небольшая
 
 ### Правила использования O-нотации
 - Убираются константы. 7n = O(n); 244n^2=O(n^2)
 - Выбирается самая быстрорастущая. 7n^2 + 8n + 9 = O(n^2)
 
 */
//: [Next](@next)
